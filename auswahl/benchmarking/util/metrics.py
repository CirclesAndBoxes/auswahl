import numpy as np

from .data_handling import DataHandler
from typing import Callable


# go
def pairwise_scoring(pod: DataHandler,
                     pairwise_sim_func: Callable[[DataHandler, np.ndarray, np.ndarray, str], float], metric_name: str):
    """
        The function provides the infrastructure for the introduction of new symmetric and  pairwise defined
        stability metrics.
        The function handles the calculation of a pairwise stability assessment function across all pairs of feature selections
        generated by an algorithm, the appropriate average fusion and storage of the results
        in the provided :class:`~auswahl.benchmarking.DataHandler` object. The scores are calculated for every method,
        every dataset and every feature configuration in the :class:`~auswahl.benchmarking.DataHandler` object.

    Parameters
    ----------
    pod: DataHandler
        :class:`~auswahl.benchmarking.DataHandler` instance generated by :func:`~auswahl.benchmarking.benchmark`
    pairwise_sim_func: Callable[[DataHandler, np.ndarray, np.ndarray, str], float]
        function calculating the stability score for a single pair of selections of features. The function has to
        return a float score and receive as arguments an instance of :class:`~auswahl.benchmarking.DataHandler`,
        the two selections as np.ndarrays containing the integer indices of the selected features and a string identifier
        of the dataset, which can be used in conjunction with the :class:`~auswahl.benchmarking.DataHandler` object
        to retrieve possibly required meta information like properties of the data, such as the total number of features
        available.

    metric_name: str
        The name of the evaluated metric

    """
    r = pod.n_runs
    for n in pod.feature_descriptors:  # FeatureDescriptor
        for method in pod.methods:
            for dataset in pod.datasets:
                # retrieve the samples of selected features (list of objects of type Selection)
                supports = pod.get_selection_data(method=method, n_features=n, dataset=dataset).to_numpy().tolist()
                supports = np.array([selection.features for selection in supports])

                # evaluate all different pairs (symmetry assumed)
                pairwise_sim = []
                dim0, dim1 = np.triu_indices(r)
                for i in range(dim0.size):
                    if dim0[i] != dim1[i]:  # only consider similarity between different pairs of feature sets
                        pairwise_sim.append(pairwise_sim_func(pod,
                                                              support_1=supports[dim0[i]],
                                                              support_2=supports[dim1[i]],
                                                              dataset=dataset))
                score = np.mean(np.array(pairwise_sim))

                pod._register_stability(method=method,
                                        n_features=n,
                                        dataset=dataset,
                                        metric_name=metric_name,
                                        value=score)


# go
def _deng_stability_score(pod: DataHandler, support_1: np.array, support_2: np.array, dataset):
    n_wavelengths = pod.get_meta(dataset)[2][1]
    n = support_1.size
    e = n ** 2 / n_wavelengths
    return (np.intersect1d(support_1, support_2).size - e) / (n - e)


# go
def deng_score(pod: DataHandler):
    """Calculates the selection stability score for randomized selection methods, according to Deng et al. [1]_.

    Parameters
    ----------
    pod : DataHandler
        :class:`~auswahl.benchmarking.DataHandler` object containing the benchmarking data.

    Returns
    -------
        Extends the passed BenchmarkPOD with the stability scores calculated according to Deng et al. [1]_.

    References
    ----------
    .. [1] Bai-Chuan Deng, Yong-Huan Yun, Pan Ma, Chen-Chen Li, Da-Bing Ren and Yi-Zeng Liang,
           'A new method for wavelength interval selection that intelligently optimizes the locations, widths
           and combination of intervals',
           Analyst, 6, 1876-1885, 2015.
    """
    pairwise_scoring(pod, _deng_stability_score, 'deng_score')


# go
def _thresholded_correlation(spectra, support_1: np.array, support_2: np.array, threshold: float):
    set_diff = np.setdiff1d(support_2, support_1)
    if set_diff.size == 0:
        return 0
    diff_features = np.transpose(spectra[:, set_diff])  # features x observations
    sup1_features = np.transpose(spectra[:, support_1])
    correlation = np.abs(np.corrcoef(sup1_features, diff_features))
    correlation = correlation * (correlation >= threshold)
    return (1 / support_2.size) * np.sum(correlation[:support_1.size, support_1.size:])


# go
def _zucknick_stability_score(pod: DataHandler, support_1: np.array, support_2: np.array, dataset):
    n = support_1.size
    spectra = pod.get_meta(dataset)[0]
    intersection_size = np.intersect1d(support_1, support_2).size
    union_size = 2 * n - intersection_size
    c_12 = _thresholded_correlation(spectra, support_1, support_2, 0.8)
    c_21 = _thresholded_correlation(spectra, support_2, support_1, 0.8)
    return (intersection_size + c_12 + c_21) / union_size


# go
def zucknick_score(pod: DataHandler):
    """Calculates the stability score according to Zucknick et al. [1]_. The stability score features a
    correlation-adjusting mechanism assessing stability not only with respect to
    set theoretical stabilities, but also according to the correlation between the features selected in different runs.


    Parameters
    ----------
    pod: DataHandler
        :class:`~auswahl.benchmarking.DataHandler` object containing the benchmarking data.

    Returns
    -------
        Extends the passed DataHandler with the stability scores calculated according to Zucknick et al. [1]_.

    References
    ----------
    .. [1] Zucknick, M., Richardson, S., Stronach, E.A.: Comparing the characteristics of
         gene expression profiles derived by univariate and multivariate classification methods.
         Stat. Appl. Genet. Molecular Biol. 7(1), 7 (2008)
    """
    pairwise_scoring(pod, _zucknick_stability_score, 'zucknick_score')


#def zucknick_score(delta):
 #   def parameterized_zucknick(pod: DataHandler):
  #      pairwise_scoring(pod, _zucknick_stability_score(delta), 'zucknick_score')
   # return parameterized_zucknick